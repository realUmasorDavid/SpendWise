"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from decouple import config
import mimetypes

# Tailwind Config
mimetypes.add_type("text/css", ".css", True)

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5y8prdkdeuac_0&5-fksmbb6lz)t(%_ut)f3)3hjo!5(@r8c(r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',
    'apps.budgets',
    'apps.transactions',
    'apps.reports',
    'apps.users',
    'apps.notifications',
    # 'apps.notifications.apps.NotificationsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'apps.notifications.context_processor.notification_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# USER = os.getenv("user")
# PASSWORD = os.getenv("password")
# HOST = os.getenv("host")
# PORT = os.getenv("port")
# DBNAME = os.getenv("dbname")

# USER = config("user")
# PASSWORD = config("password")
# HOST = config("host")
# PORT = config("port")
# DBNAME = config("dbname")

# USER = 'postgres.mefvwqxphfuholcaiaxx'
# PASSWORD = 'z+X?,kSy6dQ-G)4'
# HOST = 'aws-0-us-east-2.pooler.supabase.com'
# PORT = '5432'
# DBNAME = 'postgres'


DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': DBNAME,
    #     'USER': USER,
    #     'PASSWORD': PASSWORD,
    #     'HOST': HOST,
    #     'PORT': PORT,
    #     # 'OPTIONS': {'sslmode': 'require'},
    # },
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
}




# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Lagos'

USE_I18N = True

USE_TZ = True

# SUPABASE S3 settings
# SUPABASE_ACCESS_KEY_ID = config('SUPABASE_ACCESS_KEY_ID')
# SUPABASE_SECRET_ACCESS_KEY = config('SUPABASE_SECRET_ACCESS_KEY')
# SUPABASE_STORAGE_BUCKET_NAME = config('SUPABASE_STORAGE_BUCKET_NAME')
# SUPABASE_S3_ENDPOINT_URL = config('SUPABASE_S3_ENDPOINT_URL')
# SUPABASE_S3_REGION_NAME = config('SUPABASE_S3_REGION_NAME')

# Media files (user-uploaded content)
STORAGES = {
    # "default": {
    #     "BACKEND": "storages.backends.s3.S3Storage",
    #     "OPTIONS": {
    #         "access_key": SUPABASE_ACCESS_KEY_ID,
    #         "secret_key": SUPABASE_SECRET_ACCESS_KEY,
    #         "bucket_name": SUPABASE_STORAGE_BUCKET_NAME,
    #         "region_name": SUPABASE_S3_REGION_NAME,
    #         "endpoint_url": SUPABASE_S3_ENDPOINT_URL,
    #     },
    # },
    'default': {
        'BACKEND': 'django.core.files.storage.FileSystemStorage'
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    },
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

MEDIA_URL = '/media/'
MEDIA_LOCATION = 'media'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

USE_THOUSAND_SEPARATOR = True
THOUSAND_SEPARATOR = ','

LOGIN_URL = '/login'

LOGIN_REDIRECT_URL = '/dashboard'